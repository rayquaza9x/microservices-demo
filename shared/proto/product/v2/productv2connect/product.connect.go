// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: product/v2/product.proto

package productv2connect

import (
	context "context"
	errors "errors"
	v2 "github.com/rayquaza1994/microservices-demo/shared/proto/product/v2"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// ProductServiceName is the fully-qualified name of the ProductService service.
	ProductServiceName = "product.v2.ProductService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ProductServiceCreateProductProcedure is the fully-qualified name of the ProductService's
	// CreateProduct RPC.
	ProductServiceCreateProductProcedure = "/product.v2.ProductService/CreateProduct"
	// ProductServiceFindOneProcedure is the fully-qualified name of the ProductService's FindOne RPC.
	ProductServiceFindOneProcedure = "/product.v2.ProductService/FindOne"
	// ProductServiceDecreaseStockProcedure is the fully-qualified name of the ProductService's
	// DecreaseStock RPC.
	ProductServiceDecreaseStockProcedure = "/product.v2.ProductService/DecreaseStock"
)

// ProductServiceClient is a client for the product.v2.ProductService service.
type ProductServiceClient interface {
	CreateProduct(context.Context, *connect_go.Request[v2.CreateProductRequest]) (*connect_go.Response[v2.CreateProductResponse], error)
	FindOne(context.Context, *connect_go.Request[v2.FindOneRequest]) (*connect_go.Response[v2.FindOneResponse], error)
	DecreaseStock(context.Context, *connect_go.Request[v2.DecreaseStockRequest]) (*connect_go.Response[v2.DecreaseStockResponse], error)
}

// NewProductServiceClient constructs a client for the product.v2.ProductService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewProductServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) ProductServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &productServiceClient{
		createProduct: connect_go.NewClient[v2.CreateProductRequest, v2.CreateProductResponse](
			httpClient,
			baseURL+ProductServiceCreateProductProcedure,
			opts...,
		),
		findOne: connect_go.NewClient[v2.FindOneRequest, v2.FindOneResponse](
			httpClient,
			baseURL+ProductServiceFindOneProcedure,
			opts...,
		),
		decreaseStock: connect_go.NewClient[v2.DecreaseStockRequest, v2.DecreaseStockResponse](
			httpClient,
			baseURL+ProductServiceDecreaseStockProcedure,
			opts...,
		),
	}
}

// productServiceClient implements ProductServiceClient.
type productServiceClient struct {
	createProduct *connect_go.Client[v2.CreateProductRequest, v2.CreateProductResponse]
	findOne       *connect_go.Client[v2.FindOneRequest, v2.FindOneResponse]
	decreaseStock *connect_go.Client[v2.DecreaseStockRequest, v2.DecreaseStockResponse]
}

// CreateProduct calls product.v2.ProductService.CreateProduct.
func (c *productServiceClient) CreateProduct(ctx context.Context, req *connect_go.Request[v2.CreateProductRequest]) (*connect_go.Response[v2.CreateProductResponse], error) {
	return c.createProduct.CallUnary(ctx, req)
}

// FindOne calls product.v2.ProductService.FindOne.
func (c *productServiceClient) FindOne(ctx context.Context, req *connect_go.Request[v2.FindOneRequest]) (*connect_go.Response[v2.FindOneResponse], error) {
	return c.findOne.CallUnary(ctx, req)
}

// DecreaseStock calls product.v2.ProductService.DecreaseStock.
func (c *productServiceClient) DecreaseStock(ctx context.Context, req *connect_go.Request[v2.DecreaseStockRequest]) (*connect_go.Response[v2.DecreaseStockResponse], error) {
	return c.decreaseStock.CallUnary(ctx, req)
}

// ProductServiceHandler is an implementation of the product.v2.ProductService service.
type ProductServiceHandler interface {
	CreateProduct(context.Context, *connect_go.Request[v2.CreateProductRequest]) (*connect_go.Response[v2.CreateProductResponse], error)
	FindOne(context.Context, *connect_go.Request[v2.FindOneRequest]) (*connect_go.Response[v2.FindOneResponse], error)
	DecreaseStock(context.Context, *connect_go.Request[v2.DecreaseStockRequest]) (*connect_go.Response[v2.DecreaseStockResponse], error)
}

// NewProductServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewProductServiceHandler(svc ProductServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle(ProductServiceCreateProductProcedure, connect_go.NewUnaryHandler(
		ProductServiceCreateProductProcedure,
		svc.CreateProduct,
		opts...,
	))
	mux.Handle(ProductServiceFindOneProcedure, connect_go.NewUnaryHandler(
		ProductServiceFindOneProcedure,
		svc.FindOne,
		opts...,
	))
	mux.Handle(ProductServiceDecreaseStockProcedure, connect_go.NewUnaryHandler(
		ProductServiceDecreaseStockProcedure,
		svc.DecreaseStock,
		opts...,
	))
	return "/product.v2.ProductService/", mux
}

// UnimplementedProductServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedProductServiceHandler struct{}

func (UnimplementedProductServiceHandler) CreateProduct(context.Context, *connect_go.Request[v2.CreateProductRequest]) (*connect_go.Response[v2.CreateProductResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("product.v2.ProductService.CreateProduct is not implemented"))
}

func (UnimplementedProductServiceHandler) FindOne(context.Context, *connect_go.Request[v2.FindOneRequest]) (*connect_go.Response[v2.FindOneResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("product.v2.ProductService.FindOne is not implemented"))
}

func (UnimplementedProductServiceHandler) DecreaseStock(context.Context, *connect_go.Request[v2.DecreaseStockRequest]) (*connect_go.Response[v2.DecreaseStockResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("product.v2.ProductService.DecreaseStock is not implemented"))
}
